{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cin": {
		"prefix": "ci",
		"body": [
			"cin >> $1;"
		],
		"description": "cin"
	},
	"cout": {
		"prefix": "co",
		"body": [
			"cout << $1 << endl;"
		],
		"description": "cout"
	},
	"gcd": {
		"prefix": "gcd",
		"body": [
			"template <class T>",
			"T gcd(T a, T b) {",
			"\treturn b ? gcd(b, a % b) : a;",
			"}",
		],
	},
	"lcm": {
		"prefix": "lcm",
		"body": [
			"template <class T>",
			"T gcd(T a, T b) {",
			"\treturn b ? gcd(b, a % b) : a;",
			"}",
			"template <class T>",
			"T lcm(T a, T b) {",
			"\treturn a / gcd(a, b) * b;",
			"}",
		]
	},
	"modpow": {
		"prefix": "modp",
		"body": [
			"template <class T>",
			"i64 mod_pow(i64 a, i64 n, T mod) {",
			"\tmod = (i64)mod;",
			"\ti64 res = 1, p = a % mod;",
			"\twhile (n) {",
			"\t\tif (n & 1) res = res * p % mod;",
			"\t\tp = p * p % mod;",
			"\t\tn >>= 1;",
			"\t}",
			"\treturn res;",
			"}",
		]
	},
	"ModInt": {
		"prefix": "mod",
		"body": [
			"template <int mod>",
			"struct ModInt {",
			"\tusing i64 = int64_t;",
			"\ti64 x;",
			"\tModInt() : x(0) {}",
			"\tModInt(i64 y) : x(y >= 0 ? y % mod : ((mod - (-y) % mod) % mod)) {}",
			"\tModInt &operator+=(const ModInt &rhs) {",
			"\t\tif ((x += rhs.x) >= mod) x -= mod;",
			"\t\treturn *this;",
			"\t}",
			"\tModInt &operator-=(const ModInt &rhs) {",
			"\t\tif ((x += mod - rhs.x) >= mod) x -= mod;",
			"\t\treturn *this;",
			"\t}",
			"\tModInt &operator*=(const ModInt &rhs) {",
			"\t\tx = x * rhs.x % mod;",
			"\t\treturn *this;",
			"\t}",
			"\tModInt &operator/=(const ModInt &rhs) {",
			"\t\t*this *= rhs.inverse();",
			"\t\treturn *this;",
			"\t}",
			"\tModInt operator-() const { return ModInt(-x); }",
			"\tModInt operator+(const ModInt &rhs) const { return ModInt(*this) += rhs; }",
			"\tModInt operator-(const ModInt &rhs) const { return ModInt(*this) -= rhs; }",
			"\tModInt operator*(const ModInt &rhs) const { return ModInt(*this) *= rhs; }",
			"\tModInt operator/(const ModInt &rhs) const { return ModInt(*this) /= rhs; }",
			"\tModInt operator==(const ModInt &rhs) const { return x == rhs.x; }",
			"\tModInt operator!=(const ModInt &rhs) const { return x != rhs.x; }",
			"\tfriend ostream &operator<<(ostream &os, const ModInt &rhs) {",
			"\t\treturn os << rhs.x;",
			"\t}",
			"\tfriend istream &operator>>(istream &is, ModInt &rhs) {",
			"\t\ti64 t;",
			"\t\tis >> t;",
			"\t\trhs = ModInt<mod>(t);",
			"\t\treturn (is);",
			"\t}",
			"private:",
			"\tModInt inverse() const {",
			"\t\ti64 a = x, u = 1LL, v = 0LL, t, b = (i64)mod;",
			"\t\twhile (b > 0) {",
			"\t\t\tt = a / b;",
			"\t\t\tswap(a -= t * b, b);",
			"\t\t\tswap(u -= t * v, v);",
			"\t\t}",
			"\t\treturn ModInt(u);",
			"\t}",
			"};",
			"using mint = ModInt<1000000007>;",
		],
		"description": "ModInt"
	},
	"print": {
		"prefix": "pri",
		"body": [
			"void print() { std::cout << std::endl; }",
			"template <typename T, typename... A> void print(const T& first, const A&... rest) { cout << sizeof...(rest) << endl; std::cout << first; if (sizeof...(rest)) std::cout << \" \"; print(rest...); }",
			"template <typename... A> void print(const A&... rest) { print(rest...); }",
			"template <typename A> void print(const std::vector<A>& v) { std::for_each(v.begin(), v.end(), [](A x) { std::cout << x << \" \"; }); std::cout << std::endl; }",
		]
	},
	"main function": {
		"prefix": "m",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"void main_sub(void);",
			"int main(int argc, char* argv[]) {",
			"\tmain_sub();",
			"\treturn 0;",
			"}",
			"// int を int64_t にする",
			"// g++ に -DUSE_STRICT_INT をつけるか、",
			"// 下のコメントアウトを外すと無効化",
			"// #define USE_STRICT_INT",
			"using i64 = int64_t;",
			"#ifndef USE_STRICT_INT",
			"#define int i64",
			"#endif",
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
			"#define all(x) (x).begin(), (x).end()",
			"const int INF = (1 << 30);",
			"const i64 INFL = (1LL << 62);",
			"const i64 MOD = 1000000007;",
			"",
			"void main_sub(void) {",
			"\t$1",
			"\treturn;",
			"}",
		],
		"description": "basic main function"
	},
	"while true": {
		"prefix": "w",
		"body": [
			"while(true) {",
			"\t${1:/* code */}",
			"}"
		],
		"description": "while(true) loop"
	},
	"basic for": {
		"prefix": "f",
		"body": [
			"for(int ${1:i} = 0; ${1:i} < ${2:max}; ${1:i}++) {",
			"\t$3",
			"}"
		],
		"description": "basic for loop"
	},
	"basic cout": {
		"prefix": "c",
		"body": [
			"cout << ${1:/* code */} << endl;"
		],
		"description": "basic cout"
	},
	"basic vector": {
		"prefix": "v",
		"body": [
			"vector<${1:int}> ${2:A}(${3:N});"
		],
		"description": "basic vector"
	}
}